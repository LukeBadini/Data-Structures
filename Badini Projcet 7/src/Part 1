   a. The worst case runtime for this method would be if the int
      (2^31) - 1 was used in which case the for loop would run
      715,827,882 times. In Big-O notation, this method would have
      a runtime of O(n) because we go through a for loop (n/3) times
      (we don't care about the (1/3) in Big-O analysis).
      
   b. The worst case runtime for this method would be if the array
      given had a length of (2^31) - 1 in which case the method would
      go through every item in the array to determine which item was the
      largest. In Big-O notation, this method would have a runtime of
      O(n) because we would most likely use a for loop which would loop
      through n (A.length) times.
      
   c. The worst case runtime for this method would be if the array
      given had a length of (2^31) - 1 in which case the do-while loop
      would be executed (2^30) - 1 times and then the outer for loop
      would also loop (2^30) - 1 times and every time that executed
      another for loop would execute (2^31) - 1 times (sounds like
      your computer would explode trying to run this). In Big-O
      notation, this method would have a runtime of O(n^2) because
      we have nested for loops each looping through n times. We don't
      care about the do-while part because it is on the order of
      n rather than n^2.
      
   d. The worst case runtime for this method would be if the array
      given had a length of (2^31) - 1 in which case the outer for loop
      and the one inside the findMax method would loop that many times.
      Since findMax contains a for loop and findMax is called inside a
      for loop, the Big-O runtime of this method is O(n^2).
      
   e. The worst case runtime for this method would be if both arrays
      given had a length of (2^31) - 1 in which case all 4 for loops
      would execute (2^31) - 1 times. In Big-O notations, this method
      would have a runtime of O(n^2) because we have 2 sets of nested
      for loops and every loop executes n times (we don't care about
      the 2 in Big-O analysis).